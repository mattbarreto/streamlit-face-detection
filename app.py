"""
Versi√≥n simplificada de la aplicaci√≥n de detecci√≥n facial.
Interfaz directa y f√°cil de usar sin complicaciones.
"""

import streamlit as st
import cv2
import mediapipe as mp
import numpy as np
from PIL import Image
import io
import base64

# Configuraci√≥n b√°sica de la p√°gina
st.set_page_config(
    page_title="üòä Detector de Landmarks Faciales", page_icon="üòä", layout="wide"
)

# T√≠tulo principal
st.title("üòä Detector de Landmarks Faciales")
st.markdown("---")

# Informaci√≥n en el sidebar
st.sidebar.title("‚ÑπÔ∏è Informaci√≥n")
st.sidebar.info(
    """
    **Aplicaci√≥n simplificada para detectar landmarks faciales**

    **Pasos:**
    1. Sube una imagen con un rostro
    2. Haz clic en "Detectar Landmarks"
    3. ¬°Ve los resultados!

    **Caracter√≠sticas:**
    - Detecci√≥n autom√°tica de hasta 478 puntos faciales
    - Procesamiento r√°pido y preciso
    - Visualizaci√≥n clara con puntos verdes
    """
)


def detectar_landmarks_faciales(imagen):
    """
    Detecta landmarks faciales en una imagen usando MediaPipe
    """
    # Inicializar MediaPipe Face Mesh
    mp_face_mesh = mp.solutions.face_mesh.FaceMesh(
        static_image_mode=True,
        max_num_faces=1,
        refine_landmarks=True,
        min_detection_confidence=0.5,
    )

    try:
        # Convertir imagen para procesamiento
        imagen_bgr = cv2.cvtColor(np.array(imagen), cv2.COLOR_RGB2BGR)
        imagen_rgb = cv2.cvtColor(imagen_bgr, cv2.COLOR_BGR2RGB)

        # Procesar imagen
        resultados = mp_face_mesh.process(imagen_rgb)

        # Crear copia para dibujar
        imagen_con_puntos = imagen_bgr.copy()
        alto, ancho, _ = imagen_con_puntos.shape

        landmarks_detectados = 0

        # Verificar si se detectaron rostros
        if resultados.multi_face_landmarks:
            rostro = resultados.multi_face_landmarks[0]

            # Dibujar cada landmark
            for punto in rostro.landmark:
                coord_x_pixel = int(punto.x * ancho)
                coord_y_pixel = int(punto.y * alto)

                cv2.circle(
                    imagen_con_puntos,
                    (coord_x_pixel, coord_y_pixel),
                    2,
                    (0, 255, 0),  # Verde
                    -1,
                )

            landmarks_detectados = len(rostro.landmark)

        # Cerrar detector
        mp_face_mesh.close()

        return imagen_con_puntos, landmarks_detectados

    except Exception as e:
        # Crear mensaje de error amigable
        error_msg = str(e).lower()

        if "out of memory" in error_msg or "memory" in error_msg:
            st.error("‚ùå **Imagen demasiado grande para procesar**")
            st.warning("""
            **Problema:** La imagen es muy grande y no se puede procesar.

            **Soluciones sugeridas:**
            - Usa una imagen m√°s peque√±a (menos de 5MB)
            - Reduce las dimensiones de la imagen
            - Comprime la imagen antes de subirla
            """)
        elif "face" in error_msg or "detection" in error_msg:
            st.error("‚ùå **No se pudo procesar el rostro**")
            st.warning("""
            **Problema:** Error interno al procesar la imagen.

            **Soluciones sugeridas:**
            - Intenta con otra imagen diferente
            - Aseg√∫rate de que la imagen tenga buena calidad
            - Si el problema persiste, contacta al administrador
            """)
        else:
            st.error("‚ùå **Error interno al procesar la imagen**")
            st.warning("""
            **Problema:** Ocurri√≥ un error t√©cnico durante el procesamiento.

            **Soluciones sugeridas:**
            - Intenta procesar la imagen nuevamente
            - Usa una imagen diferente si el problema contin√∫a
            - Contacta al administrador si el error persiste
            """)

        # Log del error t√©cnico para debugging (sin mostrar al usuario)
        import logging

        logging.error(f"Error t√©cnico en procesamiento: {e}")

        mp_face_mesh.close()
        return None, 0


def imagen_a_base64(imagen_cv2):
    """Convierte imagen OpenCV a base64"""
    imagen_rgb = cv2.cvtColor(imagen_cv2, cv2.COLOR_BGR2RGB)
    imagen_pil = Image.fromarray(imagen_rgb)

    buffer = io.BytesIO()
    imagen_pil.save(buffer, format="PNG")
    imagen_bytes = buffer.getvalue()

    return base64.b64encode(imagen_bytes).decode()


def main():
    """Funci√≥n principal simplificada"""
    st.header("üì∏ Subir Imagen")

    # File uploader - siempre visible
    archivo_subido = st.file_uploader(
        "Elige una imagen con un rostro humano:",
        type=["jpg", "jpeg", "png", "bmp", "webp"],
        help="Sube una imagen clara con un rostro visible",
    )

    if archivo_subido is not None:
        try:
            # Cargar imagen
            imagen = Image.open(archivo_subido)

            # Mostrar imagen original
            st.subheader("üñºÔ∏è Imagen Original")
            st.image(
                imagen,
                caption=f"Imagen: {archivo_subido.name}",
                width="stretch",
            )

            # Bot√≥n para procesar
            if st.button("üîç Detectar Landmarks", type="primary"):
                with st.spinner("üîÑ Procesando imagen..."):
                    # Procesar imagen
                    imagen_procesada, num_landmarks = detectar_landmarks_faciales(
                        imagen
                    )

                if imagen_procesada is not None:
                    # Mostrar resultados
                    st.markdown("---")
                    st.subheader("üéØ Resultados")

                    if num_landmarks > 0:
                        # Informaci√≥n de √©xito
                        col1, col2 = st.columns([1, 1])

                        with col1:
                            st.success(f"‚úÖ ¬°Rostro detectado exitosamente!")
                            st.metric("Landmarks detectados", num_landmarks)

                        with col2:
                            st.info("üìä Informaci√≥n t√©cnica")
                            st.write("- Modelo: MediaPipe Face Mesh")
                            st.write(f"- Puntos de precisi√≥n: {num_landmarks}")
                            st.write("- Confianza m√≠nima: 50%")

                        # Mostrar imagen procesada
                        st.subheader("üîç Imagen con Landmarks")
                        imagen_base64 = imagen_a_base64(imagen_procesada)
                        st.markdown(
                            f'<img src="data:image/png;base64,{imagen_base64}" width="100%">',
                            unsafe_allow_html=True,
                        )

                        # Informaci√≥n adicional
                        st.markdown("---")
                        st.subheader("üìù ¬øQu√© son los landmarks?")

                        st.markdown("""
                        Los **landmarks faciales** son puntos caracter√≠sticos que identifican:
                        - üëÄ **Ojos**: P√°rpados, cejas, pupilas
                        - üëÉ **Nariz**: Puente, fosas nasales, punta
                        - üëÑ **Boca**: Labios, comisuras, contorno
                        - üòä **Contorno facial**: Mand√≠bula, mejillas, frente

                        **Aplicaciones comunes:**
                        - An√°lisis de expresiones faciales
                        - Realidad aumentada
                        - Reconocimiento biom√©trico
                        - Investigaci√≥n m√©dica
                        """)

                    else:
                        st.error("‚ùå No se detect√≥ ning√∫n rostro en la imagen")
                        st.warning("""
                        **¬øPor qu√© no se detect√≥ el rostro?**

                        - El rostro podr√≠a estar de perfil (necesita estar de frente)
                        - La imagen podr√≠a estar muy oscura o borrosa
                        - El rostro podr√≠a ser muy peque√±o en la imagen
                        - Podr√≠a haber obstrucciones (manos, cabello, etc.)

                        **Soluci√≥n:** Intenta con otra imagen m√°s clara donde el rostro est√© bien iluminado y ocupe una porci√≥n significativa de la imagen.
                        """)

        except Exception as e:
            # Crear mensaje de error amigable basado en el tipo de error
            error_msg = str(e).lower()

            if "cannot identify image file" in error_msg:
                st.error("‚ùå **Error al cargar la imagen**")
                st.warning("""
                **Problema:** La imagen subida no parece ser un archivo de imagen v√°lido.

                **Soluciones sugeridas:**
                - Verifica que el archivo sea una imagen (JPG, PNG, BMP, WebP)
                - Intenta comprimir la imagen si es muy grande
                - Usa una imagen diferente si el archivo est√° da√±ado
                """)
            elif "cannot read" in error_msg or "corrupt" in error_msg:
                st.error("‚ùå **Imagen corrupta o ilegible**")
                st.warning("""
                **Problema:** La imagen est√° da√±ada o no se puede leer.

                **Soluciones sugeridas:**
                - Usa una imagen diferente
                - Intenta abrir la imagen en otro programa para verificar si funciona
                - Si puedes, exporta nuevamente la imagen desde su origen
                """)
            elif "out of memory" in error_msg or "memory" in error_msg:
                st.error("‚ùå **Imagen demasiado grande**")
                st.warning("""
                **Problema:** La imagen es muy grande para procesar.

                **Soluciones sugeridas:**
                - Usa una imagen m√°s peque√±a (menos de 5MB)
                - Reduce las dimensiones de la imagen antes de subirla
                - Comprime la imagen usando herramientas en l√≠nea
                """)
            else:
                st.error("‚ùå **Error inesperado al cargar la imagen**")
                st.warning("""
                **Problema:** Ocurri√≥ un error inesperado.

                **Soluciones sugeridas:**
                - Intenta con otra imagen diferente
                - Refresca la p√°gina e intenta nuevamente
                - Si el problema persiste, contacta al administrador
                """)

            # Log del error t√©cnico para debugging (sin mostrar al usuario)
            import logging

            logging.error(f"Error t√©cnico al cargar imagen: {e}")

    else:
        # Mensaje cuando no hay imagen subida
        st.info(
            "üí° **Consejo:** Sube una imagen con un rostro humano para comenzar. La imagen debe ser clara y el rostro debe estar de frente."
        )

    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
        <p>Desarrollado con ‚ù§Ô∏è usando Streamlit, MediaPipe y OpenCV</p>
        </div>
        """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    main()
